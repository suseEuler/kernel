From 33b3ab6631ded858f811d6f5f6d7af4ac15dbc65 Mon Sep 17 00:00:00 2001
From: Michal Marek <mmarek@suse.cz>
Date: Fri, 16 Sep 2011 11:56:20 +0200
Subject: [PATCH 3/3] kabi: Add placeholders to a couple of important
 structures
Patch-mainline: Never, kabi
References: bsn#129 fate#312013
Modified-by-SEL: Yes, remove some placeholders since openEuler had similar changes

Add a void* suse_kabi_padding placeholder to the following structures:
struct smp_ops
struct vm_area_struct
struct mm_struct
struct zone
  - adding an explicit padding here is not strictly required, but can
    serve as documentation that there is some space
struct vfsmount
struct device
struct bus_type
struct class
struct device_driver
struct module
struct signal_struct
struct sched_rt_entity
struct sock
struct task_struct

The idea is that when a fix appears that requires a new member in any of
these structures, we use this padding:

  #ifdef __GENKSYMS__
          void *suse_kabi_padding;
  #else
          long foo;
  #endif

And we don't have to worry about changing size of the structure, as long
as the new member is a pointer or a long.

Signed-off-by: Michal Marek <mmarek@suse.cz>
[ gjiang: the original patch had changed 13 files but we only need the modifications in 6 files ]
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/x86/include/asm/mmu.h |    1 +
 arch/x86/include/asm/smp.h |    1 +
 include/linux/device/bus.h |    2 ++
 include/linux/mm_types.h   |    1 +
 include/linux/sched.h      |    2 ++
 include/net/sock.h         |    1 +
 6 files changed, 8 insertions(+)

--- a/arch/x86/include/asm/mmu.h
+++ b/arch/x86/include/asm/mmu.h
@@ -50,6 +50,7 @@ typedef struct {
 	u16 pkey_allocation_map;
 	s16 execute_only_pkey;
 #endif
+	void *suse_kabi_padding;
 } mm_context_t;
 
 #define INIT_MM_CONTEXT(mm)						\
--- a/arch/x86/include/asm/smp.h
+++ b/arch/x86/include/asm/smp.h
@@ -56,6 +56,7 @@ struct smp_ops {
 
 	void (*send_call_func_ipi)(const struct cpumask *mask);
 	void (*send_call_func_single_ipi)(int cpu);
+	void *suse_kabi_padding;
 };
 
 /* Globals due to paravirt */
--- a/include/linux/device/bus.h
+++ b/include/linux/device/bus.h
@@ -112,6 +112,8 @@ struct bus_type {
 	struct lock_class_key lock_key;
 
 	bool need_parent_lock;
+
+	void *suse_kabi_padding;
 };
 
 extern int __must_check bus_register(struct bus_type *bus);
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -627,6 +627,7 @@ struct mm_struct {
 		/* total used reliable pages */
 		KABI_RENAME(atomic_long_t reserve_0, atomic_long_t reliable_nr_page);
 #endif
+		void *suse_kabi_padding;
 	} __randomize_layout;
 
 #if defined(CONFIG_X86_64)
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1408,6 +1408,8 @@ struct task_struct {
 	int				mce_count;
 #endif
 
+	void				*suse_kabi_padding;
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -530,6 +530,7 @@ struct sock {
 							struct sk_buff *skb);
 #endif
 	void                    (*sk_destruct)(struct sock *sk);
+	void			*suse_kabi_padding;
 	struct sock_reuseport __rcu	*sk_reuseport_cb;
 #ifdef CONFIG_BPF_SYSCALL
 	struct bpf_local_storage __rcu	*sk_bpf_storage;
