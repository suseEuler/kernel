From b9b8f159d7d859a2a6d1fcfcfa49987af59f0c87 Mon Sep 17 00:00:00 2001
From: He Sheng <hesheng@wxiat.com>
Date: Mon, 25 Apr 2022 13:39:10 +0800
Subject: [PATCH] sw64: remove other struct switch_stack things
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: b9b8f159d7d859a2a6d1fcfcfa49987af59f0c87
Modified-by-SEL: No


Sunway inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5GF7A

--------------------------------

Based on the previous series of patches, the do_switch_stack,
undo_switch_stack and struct switch_stack become unused. Herein
they are cleaned up.

Signed-off-by: He Sheng <hesheng@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/include/uapi/asm/ptrace.h |  15 ----
 arch/sw_64/kernel/asm-offsets.c      |  11 ---
 arch/sw_64/kernel/entry.S            | 129 ---------------------------
 arch/sw_64/kernel/traps.c            |   5 +-
 4 files changed, 2 insertions(+), 158 deletions(-)

diff --git a/arch/sw_64/include/uapi/asm/ptrace.h b/arch/sw_64/include/uapi/asm/ptrace.h
index 4549e8d4bf57..deb7e4096c93 100644
--- a/arch/sw_64/include/uapi/asm/ptrace.h
+++ b/arch/sw_64/include/uapi/asm/ptrace.h
@@ -54,21 +54,6 @@ struct pt_regs {
 	unsigned long r18;
 };
 
-/*
- * This is the extended stack used by signal handlers and the context
- * switcher: it's pushed after the normal "struct pt_regs".
- */
-struct switch_stack {
-	unsigned long r9;
-	unsigned long r10;
-	unsigned long r11;
-	unsigned long r12;
-	unsigned long r13;
-	unsigned long r14;
-	unsigned long r15;
-	unsigned long r26;
-};
-
 #define PTRACE_GETREGS		12	/* get general purpose registers */
 #define PTRACE_SETREGS		13	/* set general purpose registers */
 #define PTRACE_GETFPREGS	14	/* get floating-point registers */
diff --git a/arch/sw_64/kernel/asm-offsets.c b/arch/sw_64/kernel/asm-offsets.c
index 0e8a814f47ce..5dc59346996f 100644
--- a/arch/sw_64/kernel/asm-offsets.c
+++ b/arch/sw_64/kernel/asm-offsets.c
@@ -100,17 +100,6 @@ void foo(void)
 	DEFINE(PT_REGS_R18, offsetof(struct pt_regs, r18));
 	BLANK();
 
-	DEFINE(SWITCH_STACK_SIZE, sizeof(struct switch_stack));
-	DEFINE(SWITCH_STACK_R9, offsetof(struct switch_stack, r9));
-	DEFINE(SWITCH_STACK_R10, offsetof(struct switch_stack, r10));
-	DEFINE(SWITCH_STACK_R11, offsetof(struct switch_stack, r11));
-	DEFINE(SWITCH_STACK_R12, offsetof(struct switch_stack, r12));
-	DEFINE(SWITCH_STACK_R13, offsetof(struct switch_stack, r13));
-	DEFINE(SWITCH_STACK_R14, offsetof(struct switch_stack, r14));
-	DEFINE(SWITCH_STACK_R15, offsetof(struct switch_stack, r15));
-	DEFINE(SWITCH_STACK_RA, offsetof(struct switch_stack, r26));
-	BLANK();
-
 	DEFINE(KVM_REGS_SIZE, sizeof(struct kvm_regs));
 	DEFINE(KVM_REGS_R0, offsetof(struct kvm_regs, r0));
 	DEFINE(KVM_REGS_R1, offsetof(struct kvm_regs, r1));
diff --git a/arch/sw_64/kernel/entry.S b/arch/sw_64/kernel/entry.S
index f54b02c1b3a9..977c774ad799 100644
--- a/arch/sw_64/kernel/entry.S
+++ b/arch/sw_64/kernel/entry.S
@@ -380,135 +380,6 @@ $syscall_trace_failed:
 	br	ret_from_sys_call
 	.end strace
 
-	.align 4
-	.ent do_switch_stack
-do_switch_stack:
-	ldi	$sp, -SWITCH_STACK_SIZE($sp)
-	flds	$f31, 0($sp) /* fillde hint */
-	stl	$9, SWITCH_STACK_R9($sp)
-	stl	$10, SWITCH_STACK_R10($sp)
-	stl	$11, SWITCH_STACK_R11($sp)
-	stl	$12, SWITCH_STACK_R12($sp)
-	stl	$13, SWITCH_STACK_R13($sp)
-	stl	$14, SWITCH_STACK_R14($sp)
-	stl	$15, SWITCH_STACK_R15($sp)
-	stl	$26, SWITCH_STACK_RA($sp)
-	// SIMD-FP
-	ldl	$9, TI_TASK($8)
-	ldi	$9, TASK_THREAD($9)
-	ldi	$10, THREAD_CTX_FP($9)
-	vstd	$f0, CTX_FP_F0($10)
-	vstd	$f1, CTX_FP_F1($10)
-	vstd	$f2, CTX_FP_F2($10)
-	vstd	$f3, CTX_FP_F3($10)
-	vstd	$f4, CTX_FP_F4($10)
-	vstd	$f5, CTX_FP_F5($10)
-	vstd	$f6, CTX_FP_F6($10)
-	vstd	$f7, CTX_FP_F7($10)
-	vstd	$f8, CTX_FP_F8($10)
-	vstd	$f9, CTX_FP_F9($10)
-	vstd	$f10, CTX_FP_F10($10)
-	vstd	$f11, CTX_FP_F11($10)
-	vstd	$f12, CTX_FP_F12($10)
-	vstd	$f13, CTX_FP_F13($10)
-	vstd	$f14, CTX_FP_F14($10)
-	vstd	$f15, CTX_FP_F15($10)
-	vstd	$f16, CTX_FP_F16($10)
-	vstd	$f17, CTX_FP_F17($10)
-	vstd	$f18, CTX_FP_F18($10)
-	vstd	$f19, CTX_FP_F19($10)
-	vstd	$f20, CTX_FP_F20($10)
-	vstd	$f21, CTX_FP_F21($10)
-	vstd	$f22, CTX_FP_F22($10)
-	vstd	$f23, CTX_FP_F23($10)
-	vstd	$f24, CTX_FP_F24($10)
-	vstd	$f25, CTX_FP_F25($10)
-	vstd	$f26, CTX_FP_F26($10)
-	vstd	$f27, CTX_FP_F27($10)
-	rfpcr	$f0
-	vstd	$f28, CTX_FP_F28($10)
-	vstd	$f29, CTX_FP_F29($10)
-	vstd	$f30, CTX_FP_F30($10)
-	fstd	$f0, THREAD_FPCR($9)
-	vldd	$f0, CTX_FP_F0($10)
-	ldl	$9, SWITCH_STACK_R9($sp)
-	ldl	$10, SWITCH_STACK_R10($sp)
-	ret	$31, ($1), 1
-	.end do_switch_stack
-
-	.align 4
-	.ent undo_switch_stack
-undo_switch_stack:
-#ifdef CONFIG_SUBARCH_C3B
-	fillcs	0($sp)		/* prefetch */
-#endif
-	ldl	$11, SWITCH_STACK_R11($sp)
-	ldl	$12, SWITCH_STACK_R12($sp)
-	ldl	$13, SWITCH_STACK_R13($sp)
-	ldl	$14, SWITCH_STACK_R14($sp)
-	ldl	$15, SWITCH_STACK_R15($sp)
-	ldl	$26, SWITCH_STACK_RA($sp)
-	// SIMD-FP
-	ldl	$9, TI_TASK($8)
-	ldi	$9, TASK_THREAD($9)
-	fldd	$f0, THREAD_FPCR($9)
-	wfpcr	$f0
-	fimovd	$f0, $10
-	and	$10, 0x3, $10
-	beq	$10, $setfpec_0
-	subl	$10, 0x1, $10
-	beq	$10, $setfpec_1
-	subl	$10, 0x1, $10
-	beq	$10, $setfpec_2
-	setfpec3
-	br	$setfpec_over
-$setfpec_0:
-	setfpec0
-	br	$setfpec_over
-$setfpec_1:
-	setfpec1
-	br	$setfpec_over
-$setfpec_2:
-	setfpec2
-$setfpec_over:
-	ldi	$10, THREAD_CTX_FP($9)
-	vldd	$f0, CTX_FP_F0($10)
-	vldd	$f1, CTX_FP_F1($10)
-	vldd	$f2, CTX_FP_F2($10)
-	vldd	$f3, CTX_FP_F3($10)
-	vldd	$f4, CTX_FP_F4($10)
-	vldd	$f5, CTX_FP_F5($10)
-	vldd	$f6, CTX_FP_F6($10)
-	vldd	$f7, CTX_FP_F7($10)
-	vldd	$f8, CTX_FP_F8($10)
-	vldd	$f9, CTX_FP_F9($10)
-	vldd	$f10, CTX_FP_F10($10)
-	vldd	$f11, CTX_FP_F11($10)
-	vldd	$f12, CTX_FP_F12($10)
-	vldd	$f13, CTX_FP_F13($10)
-	vldd	$f14, CTX_FP_F14($10)
-	vldd	$f15, CTX_FP_F15($10)
-	vldd	$f16, CTX_FP_F16($10)
-	vldd	$f17, CTX_FP_F17($10)
-	vldd	$f18, CTX_FP_F18($10)
-	vldd	$f19, CTX_FP_F19($10)
-	vldd	$f20, CTX_FP_F20($10)
-	vldd	$f21, CTX_FP_F21($10)
-	vldd	$f22, CTX_FP_F22($10)
-	vldd	$f23, CTX_FP_F23($10)
-	vldd	$f24, CTX_FP_F24($10)
-	vldd	$f25, CTX_FP_F25($10)
-	vldd	$f26, CTX_FP_F26($10)
-	vldd	$f27, CTX_FP_F27($10)
-	vldd	$f28, CTX_FP_F28($10)
-	vldd	$f29, CTX_FP_F29($10)
-	vldd	$f30, CTX_FP_F30($10)
-	ldl	$9, SWITCH_STACK_R9($sp)
-	ldl	$10, SWITCH_STACK_R10($sp)
-	ldi	$sp, SWITCH_STACK_SIZE($sp)
-	ret	$31, ($1), 1
-	.end undo_switch_stack
-
 /*
  * Integer register context switch
  * The callee-saved registers must be saved and restored.
diff --git a/arch/sw_64/kernel/traps.c b/arch/sw_64/kernel/traps.c
index 6cd3ade905d1..19fbf50b6ebc 100644
--- a/arch/sw_64/kernel/traps.c
+++ b/arch/sw_64/kernel/traps.c
@@ -300,9 +300,8 @@ do_entIF(unsigned long inst_type, struct pt_regs *regs)
 	case 3: /* FEN fault */
 		/*
 		 * Irritating users can call HMC_clrfen to disable the
-		 * FPU for the process. The kernel will then trap in
-		 * do_switch_stack and undo_switch_stack when we try
-		 * to save and restore the FP registers.
+		 * FPU for the process. The kernel will then trap to
+		 * save and restore the FP registers.
 
 		 * Given that GCC by default generates code that uses the
 		 * FP registers, HMC_clrfen is not useful except for DoS
-- 
2.33.0

