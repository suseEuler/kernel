From 846c800429433bb100fd8ef359a706acfe530f06 Mon Sep 17 00:00:00 2001
From: Chen Hui <judy.chenhui@huawei.com>
Date: Fri, 25 Nov 2022 12:13:02 +0800
Subject: [PATCH] sched: programmable: add bpf_sched_task_tag_of helper
 function
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 846c800429433bb100fd8ef359a706acfe530f06
Modified-by-SEL: Yes, modified due to different context


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5KUFB
CVE: NA

--------------------------------

This helper function read the tag of the struct task.
The bpf prog obtains the tags to detect different workloads.

Signed-off-by: Chen Hui <judy.chenhui@huawei.com>
Signed-off-by: Ren Zhijie <renzhijie2@huawei.com>
Signed-off-by: Hui Tang <tanghui20@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/uapi/linux/bpf.h       |    8 ++++++++
 kernel/bpf/helpers.c           |    3 +++
 kernel/sched/bpf_sched.c       |   17 +++++++++++++++++
 tools/include/uapi/linux/bpf.h |    8 ++++++++
 4 files changed, 36 insertions(+)

--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -5063,6 +5063,13 @@ union bpf_attr {
  *	Return
  *		Task group tag, if CONFIG_CGROUP_SCHED enabled, 0 as default tag, or
  *		a negative error in case of failure.
+ *
+ * long bpf_sched_task_tag_of(struct task_struct *tsk)
+ *	Description
+ *		Return task tag of *tsk*.The bpf prog obtains the tags to detect
+ *		different workloads.
+ *	Return
+ *		Task tag, if used, 0 as default tag, or a negative error in case of failure.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -5224,6 +5231,7 @@ union bpf_attr {
 	FN(get_sockops_uid_gid),	\
 	FN(sk_original_addr),		\
  	FN(sched_tg_tag_of),		\
+ 	FN(sched_task_tag_of),		\
 	FN(task_storage_get),		\
 	FN(task_storage_delete),	\
 	FN(get_current_task_btf),	\
--- a/kernel/bpf/helpers.c
+++ b/kernel/bpf/helpers.c
@@ -1350,6 +1350,7 @@ const struct bpf_func_proto bpf_probe_re
 const struct bpf_func_proto bpf_probe_read_kernel_proto __weak;
 const struct bpf_func_proto bpf_probe_read_kernel_str_proto __weak;
 const struct bpf_func_proto bpf_sched_tg_tag_of_proto __weak;
+const struct bpf_func_proto bpf_sched_task_tag_of_proto __weak;
 const struct bpf_func_proto bpf_task_pt_regs_proto __weak;
 
 const struct bpf_func_proto *
@@ -1392,6 +1393,8 @@ bpf_base_func_proto(enum bpf_func_id fun
 		return &bpf_ringbuf_query_proto;
 	case BPF_FUNC_sched_tg_tag_of:
 		return &bpf_sched_tg_tag_of_proto;
+	case BPF_FUNC_sched_task_tag_of:
+		return &bpf_sched_task_tag_of_proto;
 	case BPF_FUNC_for_each_map_elem:
 		return &bpf_for_each_map_elem_proto;
 	case BPF_FUNC_loop:
--- a/kernel/sched/bpf_sched.c
+++ b/kernel/sched/bpf_sched.c
@@ -85,3 +85,20 @@ const struct bpf_func_proto bpf_sched_tg
 	.arg1_type	= PTR_MAYBE_NULL | ARG_PTR_TO_BTF_ID,
 	.arg1_btf_id	= &btf_sched_tg_ids[0],
 };
+
+BPF_CALL_1(bpf_sched_task_tag_of, struct task_struct *, tsk)
+{
+	if (tsk == NULL)
+		return -EINVAL;
+	return tsk->tag;
+}
+
+BTF_ID_LIST_SINGLE(btf_sched_task_ids, struct, task_struct)
+
+const struct bpf_func_proto bpf_sched_task_tag_of_proto = {
+	.func		= bpf_sched_task_tag_of,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= PTR_MAYBE_NULL | ARG_PTR_TO_BTF_ID,
+	.arg1_btf_id	= &btf_sched_task_ids[0],
+};
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -5050,6 +5050,13 @@ union bpf_attr {
  *	Return
  *		Task group tag, if CONFIG_CGROUP_SCHED enabled, 0 as default tag, or
  *		a negative error in case of failure.
+ *
+ * long bpf_sched_task_tag_of(struct task_struct *tsk)
+ *	Description
+ *		Return task tag of *tsk*.The bpf prog obtains the tags to detect
+ *		different workloads.
+ *	Return
+ *		Task tag, if used, 0 as default tag, or a negative error in case of failure.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -5211,6 +5218,7 @@ union bpf_attr {
 	FN(get_sockops_uid_gid),	\
 	FN(sk_original_addr),		\
  	FN(sched_tg_tag_of),		\
+ 	FN(sched_task_tag_of),		\
 	FN(task_storage_get),		\
 	FN(task_storage_delete),	\
 	FN(get_current_task_btf),	\
