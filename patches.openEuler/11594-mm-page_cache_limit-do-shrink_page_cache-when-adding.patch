From 9fea105d74885fef299b43e6734d19ba8921242e Mon Sep 17 00:00:00 2001
From: Chen Wandun <chenwandun@huawei.com>
Date: Mon, 29 Nov 2021 16:28:35 +0800
Subject: [PATCH] mm/page_cache_limit: do shrink_page_cache when adding page to
 page cache
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 9fea105d74885fef299b43e6734d19ba8921242e
Modified-by-SEL: Yes, modified due to different context


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4HOXK

------------------------------------------

Add hooks in function add_to page_cache and add_to_page_cache_lru

Signed-off-by: Chen Wandun <chenwandun@huawei.com>
Reviewed-by: Kefeng Wang <wangkefeng.wang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/page_cache_limit.h |    2 ++
 include/linux/pagemap.h          |    2 ++
 mm/filemap.c                     |    2 ++
 3 files changed, 6 insertions(+)

--- a/include/linux/page_cache_limit.h
+++ b/include/linux/page_cache_limit.h
@@ -19,9 +19,11 @@ unsigned long __shrink_node_page_cache(i
 		unsigned long nr_to_reclaim, enum page_cache_reclaim_flag flag);
 void kpagecache_limitd_stop(int nid);
 int kpagecache_limitd_run(int nid);
+void wakeup_all_kpagecache_limitd(void);
 #else
 static inline void kpagecache_limitd_stop(int nid) {}
 static inline int kpagecache_limitd_run(int nid) { return 0; }
+static inline void wakeup_all_kpagecache_limitd(void) {}
 #endif
 
 #endif
--- a/include/linux/pagemap.h
+++ b/include/linux/pagemap.h
@@ -15,6 +15,7 @@
 #include <linux/bitops.h>
 #include <linux/hardirq.h> /* for in_interrupt() */
 #include <linux/hugetlb_inline.h>
+#include <linux/page_cache_limit.h>
 
 struct pagevec;
 
@@ -777,6 +778,7 @@ static inline int add_to_page_cache(stru
 {
 	int error;
 
+	wakeup_all_kpagecache_limitd();
 	__SetPageLocked(page);
 	error = add_to_page_cache_locked(page, mapping, offset, gfp_mask);
 	if (unlikely(error))
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -43,6 +43,7 @@
 #include <linux/psi.h>
 #include <linux/ramfs.h>
 #include <linux/page_idle.h>
+#include <linux/page_cache_limit.h>
 #include <linux/migrate.h>
 #include "internal.h"
 
@@ -925,6 +926,7 @@ int add_to_page_cache_lru(struct page *p
 	void *shadow = NULL;
 	int ret;
 
+	wakeup_all_kpagecache_limitd();
 	__SetPageLocked(page);
 	ret = __add_to_page_cache_locked(page, mapping, offset,
 					 gfp_mask, &shadow);
