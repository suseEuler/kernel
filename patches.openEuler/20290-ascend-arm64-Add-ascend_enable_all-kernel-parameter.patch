From 66ae8ddda388386daea0623a65ea2ac85c24ca00 Mon Sep 17 00:00:00 2001
From: Wang Wensheng <wangwensheng4@huawei.com>
Date: Mon, 14 Nov 2022 13:28:21 +0000
Subject: [PATCH] ascend/arm64: Add ascend_enable_all kernel parameter
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 66ae8ddda388386daea0623a65ea2ac85c24ca00
Modified-by-SEL: No


ascend inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I612UG
CVE: NA

--------------------------------

This kernel parameter is used for ascend scene and would open all the
options needed at once.

Signed-off-by: Wang Wensheng <wangwensheng4@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/kernel/cpufeature.c |  2 +-
 arch/arm64/mm/init.c           | 36 ++++++++++++++++++++++++++++++++++
 mm/hugetlb.c                   |  2 +-
 mm/memcontrol.c                |  2 +-
 4 files changed, 39 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/kernel/cpufeature.c b/arch/arm64/kernel/cpufeature.c
index f5ce1e3a532f..159481996630 100644
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@ -1729,7 +1729,7 @@ static void cpu_enable_e0pd(struct arm64_cpu_capabilities const *cap)
 #endif /* CONFIG_ARM64_E0PD */
 
 #ifdef CONFIG_ARM64_PSEUDO_NMI
-static bool enable_pseudo_nmi;
+bool enable_pseudo_nmi;
 
 static int __init early_enable_pseudo_nmi(char *p)
 {
diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c
index 7ef7c0e7ee7c..1b2f55d3c195 100644
--- a/arch/arm64/mm/init.c
+++ b/arch/arm64/mm/init.c
@@ -31,6 +31,8 @@
 #include <linux/hugetlb.h>
 #include <linux/acpi_iort.h>
 #include <linux/pin_mem.h>
+#include <linux/suspend.h>
+#include <linux/nmi.h>
 
 #include <asm/boot.h>
 #include <asm/fixmap.h>
@@ -724,3 +726,37 @@ void dump_mem_limit(void)
 		pr_emerg("Memory Limit: none\n");
 	}
 }
+
+void ascend_enable_all_features(void)
+{
+	if (IS_ENABLED(CONFIG_ASCEND_DVPP_MMAP))
+		enable_mmap_dvpp = 1;
+
+#ifdef CONFIG_ASCEND_CHARGE_MIGRATE_HUGEPAGES
+	extern int enable_charge_mighp;
+
+	enable_charge_mighp = 1;
+#endif
+
+#ifdef CONFIG_SUSPEND
+	mem_sleep_current = PM_SUSPEND_ON;
+#endif
+
+#ifdef CONFIG_ARM64_PSEUDO_NMI
+	extern bool enable_pseudo_nmi;
+
+	enable_pseudo_nmi = true;
+#endif
+
+#ifdef CONFIG_CORELOCKUP_DETECTOR
+	enable_corelockup_detector = true;
+#endif
+}
+
+static int __init ascend_enable_setup(char *__unused)
+{
+	ascend_enable_all_features();
+
+	return 0;
+}
+early_param("ascend_enable_all", ascend_enable_setup);
diff --git a/mm/hugetlb.c b/mm/hugetlb.c
index d687f271901e..6b96eda50977 100644
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@ -6226,7 +6226,7 @@ void __init hugetlb_cma_check(void)
 #endif /* CONFIG_CMA */
 
 #ifdef CONFIG_ASCEND_FEATURES
-static int enable_charge_mighp __read_mostly;
+int enable_charge_mighp __read_mostly;
 
 const struct hstate *hugetlb_get_hstate(void)
 {
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index ac07a0ffbe20..99e4e8d0242f 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -84,7 +84,7 @@ DEFINE_PER_CPU(struct mem_cgroup *, int_active_memcg);
 static bool cgroup_memory_nosocket;
 
 /* Kernel memory accounting disabled */
-static bool cgroup_memory_nokmem = true;
+bool cgroup_memory_nokmem = true;
 
 /* Whether the swap controller is active */
 #ifdef CONFIG_MEMCG_SWAP
-- 
2.33.0

