From dbcbd216c7ef1732238f2c784a82b5ceac8225c4 Mon Sep 17 00:00:00 2001
From: Li Lingfeng <lilingfeng3@huawei.com>
Date: Thu, 8 Dec 2022 21:45:42 +0800
Subject: [PATCH] Revert "add barriers to buffer_uptodate and
 set_buffer_uptodate"
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: dbcbd216c7ef1732238f2c784a82b5ceac8225c4
Modified-by-SEL: Yes, modified due to different context, this probably
		 is unneeded due to v5.10.143-0008 stable patch


hulk inclusion
category: performance
bugzilla: https://gitee.com/openeuler/kernel/issues/I65DCK
CVE: NA

-------------------------------

This reverts commit 372370dcdfb21ffc2bc99ba431841c9fd627159d.

There's no evidence that buffer_uptodate and set_buffer_uptodate are
unreliable without barriers. What's more, this patch result in the
performance deterioration.

Signed-off-by: Li Lingfeng <lilingfeng3@huawei.com>
Reviewed-by: Yang Erkun <yangerkun@huawei.com>
Reviewed-by: Zhang Yi <yi.zhang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/buffer_head.h |   36 +-----------------------------------
 1 file changed, 1 insertion(+), 35 deletions(-)

--- a/include/linux/buffer_head.h
+++ b/include/linux/buffer_head.h
@@ -117,6 +117,7 @@ static __always_inline int test_clear_bu
  * of the form "mark_buffer_foo()".  These are higher-level functions which
  * do something in addition to setting a b_state bit.
  */
+BUFFER_FNS(Uptodate, uptodate)
 BUFFER_FNS(Dirty, dirty)
 TAS_BUFFER_FNS(Dirty, dirty)
 BUFFER_FNS(Lock, locked)
@@ -134,41 +135,6 @@ BUFFER_FNS(Meta, meta)
 BUFFER_FNS(Prio, prio)
 BUFFER_FNS(Defer_Completion, defer_completion)
 
-static __always_inline void set_buffer_uptodate(struct buffer_head *bh)
-{
-	/*
-	 * If somebody else already set this uptodate, they will
-	 * have done the memory barrier, and a reader will thus
-	 * see *some* valid buffer state.
-	 *
-	 * Any other serialization (with IO errors or whatever that
-	 * might clear the bit) has to come from other state (eg BH_Lock).
-	 */
-	if (test_bit(BH_Uptodate, &bh->b_state))
-		return;
-
-	/*
-	 * make it consistent with folio_mark_uptodate
-	 * pairs with smp_load_acquire in buffer_uptodate
-	 */
-	smp_mb__before_atomic();
-	set_bit(BH_Uptodate, &bh->b_state);
-}
-
-static __always_inline void clear_buffer_uptodate(struct buffer_head *bh)
-{
-	clear_bit(BH_Uptodate, &bh->b_state);
-}
-
-static __always_inline int buffer_uptodate(const struct buffer_head *bh)
-{
-	/*
-	 * make it consistent with folio_test_uptodate
-	 * pairs with smp_mb__before_atomic in set_buffer_uptodate
-	 */
-	return (smp_load_acquire(&bh->b_state) & (1UL << BH_Uptodate)) != 0;
-}
-
 #define bh_offset(bh)		((unsigned long)(bh)->b_data & ~PAGE_MASK)
 
 /* If we *know* page->private refers to buffer_heads */
