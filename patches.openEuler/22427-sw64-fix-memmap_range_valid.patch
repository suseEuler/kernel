From 479d48674c021e7522dc7b811ee1fc8f197a8af1 Mon Sep 17 00:00:00 2001
From: Mao Minkai <maominkai@wxiat.com>
Date: Mon, 7 Nov 2022 14:28:45 +0800
Subject: [PATCH] sw64: fix memmap_range_valid()
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 479d48674c021e7522dc7b811ee1fc8f197a8af1
Modified-by-SEL: No


Sunway inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I645QZ

--------------------------------

Fix memmap_range_valid() so users can reserve memory successfully
even part of the requested space extends beyond end of memory.

Signed-off-by: Mao Minkai <maominkai@wxiat.com>
Reviewed-by: He Sheng <hesheng@wxiat.com>
Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/kernel/setup.c | 39 ++++++++++++++++++---------------------
 1 file changed, 18 insertions(+), 21 deletions(-)

diff --git a/arch/sw_64/kernel/setup.c b/arch/sw_64/kernel/setup.c
index d4c97741616f..5ec55554caf6 100644
--- a/arch/sw_64/kernel/setup.c
+++ b/arch/sw_64/kernel/setup.c
@@ -336,12 +336,15 @@ static void * __init move_initrd(unsigned long mem_limit)
 }
 #endif
 
-static int __init memmap_range_valid(phys_addr_t base, phys_addr_t size)
+static bool __init memmap_range_valid(phys_addr_t base, phys_addr_t *size)
 {
-	if ((base + size) <= memblock_end_of_DRAM())
-		return true;
-	else
+	if (base > memblock_end_of_DRAM())
 		return false;
+
+	if ((base + *size) > memblock_end_of_DRAM())
+		*size = memblock_end_of_DRAM() - base;
+
+	return true;
 }
 
 void __init process_memmap(void)
@@ -359,8 +362,8 @@ void __init process_memmap(void)
 		size = memmap_map[i].size;
 		switch (memmap_map[i].type) {
 		case memmap_reserved:
-			if (!memmap_range_valid(base, size)) {
-				pr_err("reserved memmap region [mem %#018llx-%#018llx] extends beyond end of memory (%#018llx)\n",
+			if (!memmap_range_valid(base, &size)) {
+				pr_err("reserved memmap region [mem %#018llx-%#018llx] beyond end of memory (%#018llx)\n",
 						base, base + size - 1, memblock_end_of_DRAM());
 			} else {
 				pr_info("reserved memmap region [mem %#018llx-%#018llx]\n",
@@ -375,8 +378,8 @@ void __init process_memmap(void)
 			}
 			break;
 		case memmap_pci:
-			if (!memmap_range_valid(base, size)) {
-				pr_info("pci memmap region [mem %#018llx-%#018llx] extends beyond end of memory (%#018llx)\n",
+			if (!memmap_range_valid(base, &size)) {
+				pr_err("pci memmap region [mem %#018llx-%#018llx] beyond end of memory (%#018llx)\n",
 						base, base + size - 1, memblock_end_of_DRAM());
 			} else {
 				pr_info("pci memmap region [mem %#018llx-%#018llx]\n",
@@ -388,29 +391,23 @@ void __init process_memmap(void)
 			}
 			break;
 		case memmap_initrd:
-			if (!memmap_range_valid(base, size)) {
+			if ((base + size) > memblock_end_of_DRAM()) {
 				phys_addr_t old_base = base;
 
 				base = (unsigned long) move_initrd(memblock_end_of_DRAM());
 				if (!base) {
 					pr_err("initrd memmap region [mem %#018llx-%#018llx] extends beyond end of memory (%#018llx)\n",
 							old_base, old_base + size - 1, memblock_end_of_DRAM());
+					break;
 				} else {
 					memmap_map[i].addr = base;
-					pr_info("initrd memmap region [mem %#018llx-%#018llx]\n",
-							base, base + size - 1);
-					ret = memblock_reserve(base, size);
-					if (ret)
-						pr_err("reserve memmap region [mem %#018llx-%#018llx] failed\n",
-								base, base + size - 1);
 				}
-			} else {
-				pr_info("initrd memmap region [mem %#018llx-%#018llx]\n", base, base + size - 1);
-				ret = memblock_reserve(base, size);
-				if (ret)
-					pr_err("reserve memmap region [mem %#018llx-%#018llx] failed\n",
-							base, base + size - 1);
 			}
+			pr_info("initrd memmap region [mem %#018llx-%#018llx]\n", base, base + size - 1);
+			ret = memblock_reserve(base, size);
+			if (ret)
+				pr_err("reserve memmap region [mem %#018llx-%#018llx] failed\n",
+						base, base + size - 1);
 			break;
 		case memmap_kvm:
 		case memmap_crashkernel:
-- 
2.33.0

