From 37aa04a66c340e6d46e8a8c017866af422d067c9 Mon Sep 17 00:00:00 2001
From: Hui Tang <tanghui20@huawei.com>
Date: Fri, 25 Nov 2022 11:56:24 +0800
Subject: [PATCH] bpf:programmable: Add helper func to check cpu share cache
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 37aa04a66c340e6d46e8a8c017866af422d067c9
Modified-by-SEL: Yes, modified due to different context


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5KUFB
CVE: NA

--------------------------------

Add helper function to check two cpu whehter share same LLC cache.

Signed-off-by: Hui Tang <tanghui20@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/uapi/linux/bpf.h       |    7 +++++++
 kernel/sched/bpf_sched.c       |   19 +++++++++++++++++++
 tools/include/uapi/linux/bpf.h |    7 +++++++
 3 files changed, 33 insertions(+)

--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -5160,6 +5160,12 @@ union bpf_attr {
  *			0 on success, or a negative error in case of failure.
  *	Return
  *		View above.
+ *
+ * int bpf_cpus_share_cache(int src_cpu, int dst_cpu)
+ *	Description
+ *		check src_cpu whether share cache with dst_cpu.
+ *	Return
+ *		yes 1, no 0.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -5331,6 +5337,7 @@ union bpf_attr {
  	FN(sched_entity_to_task),	\
  	FN(sched_entity_to_tg),		\
 	FN(cpumask_op),			\
+	FN(cpus_share_cache),		\
 	FN(task_storage_get),		\
 	FN(task_storage_delete),	\
 	FN(get_current_task_btf),	\
--- a/kernel/sched/bpf_sched.c
+++ b/kernel/sched/bpf_sched.c
@@ -260,6 +260,23 @@ static const struct bpf_func_proto bpf_c
 	.arg2_type	= ARG_CONST_SIZE,
 };
 
+BPF_CALL_2(bpf_cpus_share_cache, int, src_cpu, int, dst_cpu)
+{
+	if ((unsigned int)src_cpu >= nr_cpu_ids ||
+	    (unsigned int)dst_cpu >= nr_cpu_ids)
+		return 0;
+
+	return cpus_share_cache(src_cpu, dst_cpu);
+}
+
+static const struct bpf_func_proto bpf_cpus_share_cache_proto = {
+	.func		= bpf_cpus_share_cache,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+};
+
 static const struct bpf_func_proto *
 bpf_sched_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 {
@@ -280,6 +297,8 @@ bpf_sched_func_proto(enum bpf_func_id fu
 		return &bpf_sched_entity_to_tg_proto;
 	case BPF_FUNC_cpumask_op:
 		return &bpf_cpumask_op_proto;
+	case BPF_FUNC_cpus_share_cache:
+		return &bpf_cpus_share_cache_proto;
 	default:
 		return bpf_base_func_proto(func_id);
 	}
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -5147,6 +5147,12 @@ union bpf_attr {
  *			0 on success, or a negative error in case of failure.
  *	Return
  *		View above.
+ *
+ * int bpf_cpus_share_cache(int src_cpu, int dst_cpu)
+ *	Description
+ *		check src_cpu whether share cache with dst_cpu.
+ *	Return
+ *		true yes, false no.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -5318,6 +5324,7 @@ union bpf_attr {
  	FN(sched_entity_to_task),	\
  	FN(sched_entity_to_tg),		\
 	FN(cpumask_op),			\
+	FN(cpus_share_cache),		\
 	FN(task_storage_get),		\
 	FN(task_storage_delete),	\
 	FN(get_current_task_btf),	\
