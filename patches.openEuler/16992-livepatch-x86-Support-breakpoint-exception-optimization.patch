From a0f76f5630f09d65fe4cb40665d15ae4b0c77f20 Mon Sep 17 00:00:00 2001
From: Li Huafei <lihuafei1@huawei.com>
Date: Wed, 6 Jul 2022 18:05:20 +0800
Subject: [PATCH] livepatch/x86: Support breakpoint exception optimization
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: a0f76f5630f09d65fe4cb40665d15ae4b0c77f20
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5CJ7X

--------------------------------

Implement the arch_klp_{check, add, remove}_breakpoint interface to support
breakpoint exception optimization.

Signed-off-by: Li Huafei <lihuafei1@huawei.com>
Reviewed-by: Xu Kuohai <xukuohai@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/x86/include/asm/livepatch.h | 13 +++++
 arch/x86/kernel/livepatch.c      | 83 +++++++++++++++++++++++++++++++-
 arch/x86/kernel/traps.c          | 10 ++++
 3 files changed, 104 insertions(+), 2 deletions(-)

diff --git a/arch/x86/include/asm/livepatch.h b/arch/x86/include/asm/livepatch.h
index e23c2da3c323..e0faa20d525d 100644
--- a/arch/x86/include/asm/livepatch.h
+++ b/arch/x86/include/asm/livepatch.h
@@ -37,9 +37,22 @@ int klp_check_calltrace(struct klp_patch *patch, int enable);
 #define JMP_E9_INSN_SIZE 5
 struct arch_klp_data {
 	unsigned char old_code[JMP_E9_INSN_SIZE];
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
+	/*
+	 * Saved opcode at the entry of the old func (which maybe replaced
+	 * with breakpoint).
+	 */
+	unsigned char saved_opcode;
+#endif
 };
 
 long arch_klp_save_old_code(struct arch_klp_data *arch_data, void *old_func);
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
+int arch_klp_check_breakpoint(struct arch_klp_data *arch_data, void *old_func);
+int arch_klp_add_breakpoint(struct arch_klp_data *arch_data, void *old_func);
+void arch_klp_remove_breakpoint(struct arch_klp_data *arch_data, void *old_func);
+int klp_int3_handler(struct pt_regs *regs);
+#endif
 
 #endif
 
diff --git a/arch/x86/kernel/livepatch.c b/arch/x86/kernel/livepatch.c
index 5763876457d1..b026efdfe346 100644
--- a/arch/x86/kernel/livepatch.c
+++ b/arch/x86/kernel/livepatch.c
@@ -31,6 +31,10 @@
 #include <asm/nops.h>
 #include <asm/sections.h>
 
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
+#include <linux/kprobes.h>
+#endif
+
 #ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
 /*
  * The instruction set on x86 is CISC.
@@ -352,6 +356,74 @@ int klp_check_calltrace(struct klp_patch *patch, int enable)
 	free_list(&check_funcs);
 	return ret;
 }
+
+int arch_klp_check_breakpoint(struct arch_klp_data *arch_data, void *old_func)
+{
+	int ret;
+	unsigned char opcode;
+
+	ret = copy_from_kernel_nofault(&opcode, old_func, INT3_INSN_SIZE);
+	if (ret)
+		return ret;
+
+	/* Another subsystem puts a breakpoint, reject patching at this time */
+	if (opcode == INT3_INSN_OPCODE)
+		return -EBUSY;
+
+	return 0;
+}
+
+int arch_klp_add_breakpoint(struct arch_klp_data *arch_data, void *old_func)
+{
+	unsigned char int3 = INT3_INSN_OPCODE;
+	int ret;
+
+	ret = copy_from_kernel_nofault(&arch_data->saved_opcode, old_func,
+				       INT3_INSN_SIZE);
+	if (ret)
+		return ret;
+
+	text_poke(old_func, &int3, INT3_INSN_SIZE);
+	/* arch_klp_code_modify_post_process() will do text_poke_sync() */
+
+	return 0;
+}
+
+void arch_klp_remove_breakpoint(struct arch_klp_data *arch_data, void *old_func)
+{
+	unsigned char opcode;
+	int ret;
+
+	ret = copy_from_kernel_nofault(&opcode, old_func, INT3_INSN_SIZE);
+	if (ret) {
+		pr_warn("%s: failed to read opcode, ret=%d\n", __func__, ret);
+		return;
+	}
+
+	/* instruction have been recovered at arch_klp_unpatch_func() */
+	if (opcode != INT3_INSN_OPCODE)
+		return;
+
+	text_poke(old_func, &arch_data->saved_opcode, INT3_INSN_SIZE);
+	/* arch_klp_code_modify_post_process() will do text_poke_sync() */
+}
+
+int klp_int3_handler(struct pt_regs *regs)
+{
+	unsigned long addr = regs->ip - INT3_INSN_SIZE;
+	void *brk_func;
+
+	if (user_mode(regs))
+		return 0;
+
+	brk_func = klp_get_brk_func((void *)addr);
+	if (!brk_func)
+		return 0;
+
+	int3_emulate_jmp(regs, (unsigned long)brk_func);
+	return 1;
+}
+NOKPROBE_SYMBOL(klp_int3_handler);
 #endif
 
 #ifdef CONFIG_LIVEPATCH_WO_FTRACE
@@ -390,15 +462,22 @@ int arch_klp_patch_func(struct klp_func *func)
 {
 	struct klp_func_node *func_node;
 	unsigned long ip, new_addr;
-	void *new;
+	unsigned char *new;
 
 	func_node = func->func_node;
 	ip = (unsigned long)func->old_func;
 	list_add_rcu(&func->stack_node, &func_node->func_stack);
 	new_addr = (unsigned long)func->new_func;
 	/* replace the text with the new text */
-	new = klp_jmp_code(ip, new_addr);
+	new = (unsigned char *)klp_jmp_code(ip, new_addr);
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
+	/* update jmp offset */
+	text_poke((void *)(ip + 1), new + 1, JMP_E9_INSN_SIZE - 1);
+	/* update jmp opcode */
+	text_poke((void *)ip, new, 1);
+#else
 	text_poke((void *)ip, new, JMP_E9_INSN_SIZE);
+#endif
 
 	return 0;
 }
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index 303970bba0f8..696ec85164e6 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -62,6 +62,10 @@
 #include <asm/insn-eval.h>
 #include <asm/vdso.h>
 
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
+#include <asm/livepatch.h>
+#endif
+
 #ifdef CONFIG_X86_64
 #include <asm/x86_init.h>
 #include <asm/proto.h>
@@ -654,6 +658,12 @@ static bool do_int3(struct pt_regs *regs)
 	if (kprobe_int3_handler(regs))
 		return true;
 #endif
+
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
+	if (klp_int3_handler(regs))
+		return true;
+#endif
+
 	res = notify_die(DIE_INT3, "int3", regs, 0, X86_TRAP_BP, SIGTRAP);
 
 	return res == NOTIFY_STOP;
-- 
2.33.0

