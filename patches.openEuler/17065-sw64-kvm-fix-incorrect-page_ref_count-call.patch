From c1bf5440faf937aa402e5c08090537948dd99d60 Mon Sep 17 00:00:00 2001
From: Min Fanlei <minfanlei@wxiat.com>
Date: Tue, 7 Jun 2022 15:12:25 +0800
Subject: [PATCH] sw64: kvm: fix incorrect page_ref_count() call
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: c1bf5440faf937aa402e5c08090537948dd99d60
Modified-by-SEL: No


Sunway inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I56WV8

--------------------------------

The last page_ref_count() call will cause kernel panic if
kvm memory pool is at the end of DRAM. This patch reorders
the checks to avoid illegal atomic_read operation.

Signed-off-by: Min Fanlei <minfanlei@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/kernel/setup.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/arch/sw_64/kernel/setup.c b/arch/sw_64/kernel/setup.c
index 4d39db5fb1ef..e20e215dd08a 100644
--- a/arch/sw_64/kernel/setup.c
+++ b/arch/sw_64/kernel/setup.c
@@ -1026,8 +1026,7 @@ static int __init sw64_kvm_pool_init(void)
 	end_page  = pfn_to_page((kvm_mem_base + kvm_mem_size - 1) >> PAGE_SHIFT);
 
 	p = base_page;
-	while (page_ref_count(p) == 0 &&
-			(unsigned long)p <= (unsigned long)end_page) {
+	while (p <= end_page && page_ref_count(p) == 0) {
 		set_page_count(p, 1);
 		page_mapcount_reset(p);
 		SetPageReserved(p);
-- 
2.33.0

