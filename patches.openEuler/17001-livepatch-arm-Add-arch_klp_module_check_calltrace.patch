From 80b86dcf9592dbabffb052f2fb54a12c59c764ca Mon Sep 17 00:00:00 2001
From: Yang Jihong <yangjihong1@huawei.com>
Date: Wed, 6 Jul 2022 18:05:29 +0800
Subject: [PATCH] livepatch/arm: Add arch_klp_module_check_calltrace
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 80b86dcf9592dbabffb052f2fb54a12c59c764ca
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5CJ7X

--------------------------------

Add arch_klp_module_check_calltrace to check whether stacks of all tasks
are within the code segment of module.

Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
Reviewed-by: Xu Kuohai <xukuohai@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm/include/asm/livepatch.h |  1 +
 arch/arm/kernel/livepatch.c      | 22 ++++++++++++++++++++++
 2 files changed, 23 insertions(+)

diff --git a/arch/arm/include/asm/livepatch.h b/arch/arm/include/asm/livepatch.h
index 70ce2dba7134..47d8b01618c7 100644
--- a/arch/arm/include/asm/livepatch.h
+++ b/arch/arm/include/asm/livepatch.h
@@ -60,6 +60,7 @@ struct arch_klp_data {
 int arch_klp_add_breakpoint(struct arch_klp_data *arch_data, void *old_func);
 void arch_klp_remove_breakpoint(struct arch_klp_data *arch_data, void *old_func);
 long arch_klp_save_old_code(struct arch_klp_data *arch_data, void *old_func);
+int arch_klp_module_check_calltrace(void *data);
 
 #endif
 
diff --git a/arch/arm/kernel/livepatch.c b/arch/arm/kernel/livepatch.c
index 8b78e05240a0..713ce67fa6e3 100644
--- a/arch/arm/kernel/livepatch.c
+++ b/arch/arm/kernel/livepatch.c
@@ -75,6 +75,7 @@ struct klp_func_list {
 struct walk_stackframe_args {
 	int enable;
 	struct klp_func_list *check_funcs;
+	struct module *mod;
 	int ret;
 };
 
@@ -328,6 +329,27 @@ int klp_check_calltrace(struct klp_patch *patch, int enable)
 	return ret;
 }
 
+static int check_module_calltrace(struct stackframe *frame, void *data)
+{
+	struct walk_stackframe_args *args = data;
+
+	if (within_module_core(frame->pc, args->mod)) {
+		pr_err("module %s is in use!\n", args->mod->name);
+		return (args->ret = -EBUSY);
+	}
+	return 0;
+}
+
+int arch_klp_module_check_calltrace(void *data)
+{
+	struct walk_stackframe_args args = {
+		.mod = (struct module *)data,
+		.ret = 0
+	};
+
+	return do_check_calltrace(&args, check_module_calltrace);
+}
+
 int arch_klp_add_breakpoint(struct arch_klp_data *arch_data, void *old_func)
 {
 	u32 *addr = (u32 *)old_func;
-- 
2.33.0

