From 751e450b08b35f491121fa7f977f1234d1366a12 Mon Sep 17 00:00:00 2001
From: He Sheng <hesheng@wxiat.com>
Date: Tue, 10 May 2022 13:50:33 +0800
Subject: [PATCH] sw64: kapi: use generic vga.h
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 751e450b08b35f491121fa7f977f1234d1366a12
Modified-by-SEL: No


Sunway inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I56OLG

--------------------------------

The old arch-specific vga.h takes no effect now, so use the
generic version. As a result, the arch-specific scr_memcpyw
interface and __is_ioaddr helper can be removed too.

Signed-off-by: He Sheng <hesheng@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/include/asm/io.h  |  8 ------
 arch/sw_64/include/asm/vga.h | 54 ------------------------------------
 arch/sw_64/lib/iomap.c       | 37 ------------------------
 3 files changed, 99 deletions(-)
 delete mode 100644 arch/sw_64/include/asm/vga.h

diff --git a/arch/sw_64/include/asm/io.h b/arch/sw_64/include/asm/io.h
index cb6c7c1f4a6b..e8e80c761467 100644
--- a/arch/sw_64/include/asm/io.h
+++ b/arch/sw_64/include/asm/io.h
@@ -211,14 +211,6 @@ static inline void __iounmap(volatile void __iomem *addr)
 
 #define iounmap				__iounmap
 
-static inline int __is_ioaddr(unsigned long addr)
-{
-	return addr >= (PAGE_OFFSET | IO_BASE);
-}
-
-#define __is_ioaddr(a)  __is_ioaddr((unsigned long)(a))
-
-
 #define ioread16be(p) be16_to_cpu(ioread16(p))
 #define ioread32be(p) be32_to_cpu(ioread32(p))
 #define iowrite16be(v, p) iowrite16(cpu_to_be16(v), (p))
diff --git a/arch/sw_64/include/asm/vga.h b/arch/sw_64/include/asm/vga.h
deleted file mode 100644
index 7268b5cd4bd8..000000000000
--- a/arch/sw_64/include/asm/vga.h
+++ /dev/null
@@ -1,54 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- *	Access to VGA videoram
- *
- *	(c) 1998 Martin Mares <mj@ucw.cz>
- */
-
-#ifndef _ASM_SW64_VGA_H
-#define _ASM_SW64_VGA_H
-
-#include <asm/io.h>
-
-#define VT_BUF_HAVE_RW
-#define VT_BUF_HAVE_MEMSETW
-#define VT_BUF_HAVE_MEMCPYW
-
-static inline void scr_writew(u16 val, volatile u16 *addr)
-{
-	if (__is_ioaddr(addr))
-		__raw_writew(val, (volatile u16 __iomem *) addr);
-	else
-		*addr = val;
-}
-
-static inline u16 scr_readw(volatile const u16 *addr)
-{
-	if (__is_ioaddr(addr))
-		return __raw_readw((volatile const u16 __iomem *) addr);
-	else
-		return *addr;
-}
-
-static inline void scr_memsetw(u16 *s, u16 c, unsigned int count)
-{
-	if (__is_ioaddr(s))
-		memsetw_io((u16 __iomem *) s, c, count);
-	else
-		memsetw(s, c, count);
-}
-
-/* Do not trust that the usage will be correct; analyze the arguments.  */
-extern void scr_memcpyw(u16 *d, const u16 *s, unsigned int count);
-
-/*
- * ??? These are currently only used for downloading character sets.  As
- * such, they don't need memory barriers.  Is this all they are intended
- * to be used for?
- */
-#define vga_readb(a)		readb((u8 __iomem *)(a))
-#define vga_writeb(v, a)	writeb(v, (u8 __iomem *)(a))
-
-#define VGA_MAP_MEM(x, s)	((unsigned long)ioremap(x, s))
-
-#endif
diff --git a/arch/sw_64/lib/iomap.c b/arch/sw_64/lib/iomap.c
index 39e3d5498ae6..6fb96a7d7119 100644
--- a/arch/sw_64/lib/iomap.c
+++ b/arch/sw_64/lib/iomap.c
@@ -457,43 +457,6 @@ void _memset_c_io(volatile void __iomem *to, unsigned long c, long count)
 }
 EXPORT_SYMBOL(_memset_c_io);
 
-/*
- * A version of memcpy used by the vga console routines to move data around
- * arbitrarily between screen and main memory.
- */
-
-void
-scr_memcpyw(u16 *d, const u16 *s, unsigned int count)
-{
-	const u16 __iomem *ios = (const u16 __iomem *) s;
-	u16 __iomem *iod = (u16 __iomem *) d;
-	int s_isio = __is_ioaddr(s);
-	int d_isio = __is_ioaddr(d);
-	u16 tmp;
-
-	if (s_isio) {
-		if (d_isio) {
-			/*
-			 * FIXME: Should handle unaligned ops and
-			 * operation widening.
-			 */
-
-			count /= 2;
-			while (count--) {
-				tmp = __raw_readw(ios++);
-				__raw_writew(tmp, iod++);
-			}
-		} else
-			memcpy_fromio(d, ios, count);
-	} else {
-		if (d_isio)
-			memcpy_toio(iod, s, count);
-		else
-			memcpy(d, s, count);
-	}
-}
-EXPORT_SYMBOL(scr_memcpyw);
-
 void __iomem *ioport_map(unsigned long port, unsigned int size)
 {
 	return ioportmap(port);
-- 
2.33.0

