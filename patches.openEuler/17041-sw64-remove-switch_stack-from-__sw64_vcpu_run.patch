From b936d36d7ef16056e8b64dda3a0110a39a543bab Mon Sep 17 00:00:00 2001
From: He Sheng <hesheng@wxiat.com>
Date: Mon, 25 Apr 2022 15:09:11 +0800
Subject: [PATCH] sw64: remove switch_stack from __sw64_vcpu_run
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: b936d36d7ef16056e8b64dda3a0110a39a543bab
Modified-by-SEL: No


Sunway inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5GF7A

--------------------------------

Since r9~r15 have been added to struct pt_regs, it's okay to save
and restore host callee-saved integer registers with pt_regs.

Signed-off-by: He Sheng <hesheng@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/kvm/entry.S | 57 +++++++++++++++---------------------------
 1 file changed, 20 insertions(+), 37 deletions(-)

diff --git a/arch/sw_64/kvm/entry.S b/arch/sw_64/kvm/entry.S
index 76ebdda920cb..1e089da5378e 100644
--- a/arch/sw_64/kvm/entry.S
+++ b/arch/sw_64/kvm/entry.S
@@ -34,20 +34,15 @@ ENTRY(__sw64_vcpu_run)
 	/* r18 = hcall args */
 	/* save host  pt_regs to current kernel  stack */
 	ldi	sp, -PT_REGS_SIZE(sp)
-
-	stl     $8, PT_REGS_R8(sp)
+	stl	$9, PT_REGS_R9(sp)
+	stl	$10, PT_REGS_R10(sp)
+	stl	$11, PT_REGS_R11(sp)
+	stl	$12, PT_REGS_R12(sp)
+	stl	$13, PT_REGS_R13(sp)
+	stl	$14, PT_REGS_R14(sp)
+	stl	$15, PT_REGS_R15(sp)
 	stl	$26, PT_REGS_R26(sp)
 
-	/* save host switch stack to current kernel stack */
-	ldi	sp, -SWITCH_STACK_SIZE(sp)
-	stl	$9, SWITCH_STACK_R9(sp)
-	stl	$10, SWITCH_STACK_R10(sp)
-	stl	$11, SWITCH_STACK_R11(sp)
-	stl	$12, SWITCH_STACK_R12(sp)
-	stl	$13, SWITCH_STACK_R13(sp)
-	stl	$14, SWITCH_STACK_R14(sp)
-	stl	$15, SWITCH_STACK_R15(sp)
-
 	/* restore guest switch stack from guest kvm_regs struct */
 	ldl	$0, KVM_REGS_R0($17)
 	ldl	$1, KVM_REGS_R1($17)
@@ -203,23 +198,19 @@ $g_setfpec_over:
 	stl	$27, KVM_REGS_R27($17)
 	stl	$28, KVM_REGS_R28($17)
 
-	/* restore host switch stack from host sp */
-	ldl	$9, SWITCH_STACK_R9(sp)
-	ldl	$10, SWITCH_STACK_R10(sp)
-	ldl	$11, SWITCH_STACK_R11(sp)
-	ldl	$12, SWITCH_STACK_R12(sp)
-	ldl	$13, SWITCH_STACK_R13(sp)
-	ldl	$14, SWITCH_STACK_R14(sp)
-	ldl	$15, SWITCH_STACK_R15(sp)
-
-	ldi	sp, SWITCH_STACK_SIZE(sp)
-
 	/* restore host regs from host sp */
-	ldl     $8, PT_REGS_R8(sp)
+	ldl	$9, PT_REGS_R9(sp)
+	ldl	$10, PT_REGS_R10(sp)
+	ldl	$11, PT_REGS_R11(sp)
+	ldl	$12, PT_REGS_R12(sp)
+	ldl	$13, PT_REGS_R13(sp)
+	ldl	$14, PT_REGS_R14(sp)
+	ldl	$15, PT_REGS_R15(sp)
 	ldl	$26, PT_REGS_R26(sp)
-
 	ldi	sp, PT_REGS_SIZE(sp)
 
+	ldi	$8, 0x3fff
+	bic	sp, $8, $8
 	/* restore host fpregs */
 	ldl	$1, TI_TASK($8)
 	ldi	$1, TASK_THREAD($1)
@@ -261,25 +252,17 @@ $setfpec_over:
 
 	/* Hmcode will setup in  */
 	/* restore $16 $17 $18, do interrupt trick */
-	ldi	sp, -(HOST_INT_SIZE + PT_REGS_SIZE + SWITCH_STACK_SIZE)(sp)
+	ldi	sp, -(HOST_INT_SIZE + PT_REGS_SIZE)(sp)
 	ldl	$16, HOST_INT_R16(sp)
 	ldl	$17, HOST_INT_R17(sp)
 	ldl	$18, HOST_INT_R18(sp)
-	ldi	sp, (HOST_INT_SIZE + PT_REGS_SIZE + SWITCH_STACK_SIZE)(sp)
+	ldi	sp, (HOST_INT_SIZE + PT_REGS_SIZE)(sp)
 
-	ldi	$8, 0x3fff
-	bic	sp, $8, $8
 	ldi	$19, -PT_REGS_SIZE(sp)
-
-	ldi	$26, ret_from_do_entInt_noregs
-	call	$31, do_entInt
-
-	/* ret($0) indicate hcall number */
-ret_from_do_entInt_noregs:
+	call	$26, do_entInt
 	ldl	$26, VCPU_RET_RA(sp)
 	ldl	$0, VCPU_RET_R0(sp)
-
-	/* restore r16 - r19 */
 $ret_to:
+	/* ret($0) indicate hcall number */
 	ldi	sp, VCPU_RET_SIZE(sp)	/* pop stack */
 	ret
-- 
2.33.0

