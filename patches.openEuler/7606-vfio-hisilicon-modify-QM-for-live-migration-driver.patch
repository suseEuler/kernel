From cf8167eca399a31f5304ddaf32d15a0d967732c2 Mon Sep 17 00:00:00 2001
From: Longfang Liu <liulongfang@huawei.com>
Date: Sat, 4 Sep 2021 17:22:46 +0800
Subject: [PATCH] vfio/hisilicon: modify QM for live migration driver
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: cf8167eca399a31f5304ddaf32d15a0d967732c2
Modified-by-SEL: Yes, modified due to different context


driver inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I473Q4?from=project-issue

----------------------------------------------------------------------

Add device status recording function for accelerator live migration driver.

Signed-off-by: Longfang Liu <liulongfang@huawei.com>
Reviewed-by: Hao Fang <fanghao11@huawei.com>
Reviewed-by: Mingqiang Ling <lingmingqiang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 drivers/crypto/hisilicon/qm.c | 21 +++++++++++++--------
 include/linux/hisi_acc_qm.h   |  9 +++++----
 2 files changed, 18 insertions(+), 12 deletions(-)

diff --git a/drivers/crypto/hisilicon/qm.c b/drivers/crypto/hisilicon/qm.c
index 55e109c66db2..2af385d12a57 100644
--- a/drivers/crypto/hisilicon/qm.c
+++ b/drivers/crypto/hisilicon/qm.c
@@ -3646,6 +3646,13 @@ static int hisi_qp_memory_init(struct hisi_qm *qm, size_t dma_size, int id,
 	return ret;
 }
 
+static void hisi_qm_set_state(struct hisi_qm *qm, enum vf_state state)
+{
+	/* set vf driver state */
+	if (qm->ver > QM_HW_V2)
+		writel(state, qm->io_base + QM_VF_STATE);
+}
+
 static void hisi_qm_pre_init(struct hisi_qm *qm)
 {
 	struct pci_dev *pdev = qm->pdev;
@@ -3716,12 +3723,6 @@ static void hisi_qm_pci_uninit(struct hisi_qm *qm)
 	pci_disable_device(pdev);
 }
 
-static void hisi_qm_set_state(struct hisi_qm *qm, u8 state)
-{
-	if (qm->ver > QM_HW_V2 && qm->fun_type == QM_HW_VF)
-		writel(state, qm->io_base + QM_VF_STATE);
-}
-
 static void qm_last_regs_uninit(struct hisi_qm *qm)
 {
 	struct qm_debug *debug = &qm->debug;
@@ -3775,7 +3776,7 @@ void hisi_qm_uninit(struct hisi_qm *qm)
 	}
 
 	hisi_qm_memory_uninit(qm);
-	hisi_qm_set_state(qm, QM_NOT_READY);
+	hisi_qm_set_state(qm, VF_NOT_READY);
 	up_write(&qm->qps_lock);
 
 	qm_irqs_unregister(qm);
@@ -4000,7 +4001,7 @@ int hisi_qm_start(struct hisi_qm *qm)
 	if (!ret)
 		atomic_set(&qm->status.flags, QM_START);
 
-	hisi_qm_set_state(qm, QM_READY);
+	hisi_qm_set_state(qm, VF_READY);
 err_unlock:
 	up_write(&qm->qps_lock);
 	return ret;
@@ -4095,6 +4096,8 @@ int hisi_qm_stop(struct hisi_qm *qm, enum qm_stop_reason r)
 	struct device *dev = &qm->pdev->dev;
 	int ret = 0;
 
+	hisi_qm_set_state(qm, VF_PREPARE);
+
 	down_write(&qm->qps_lock);
 
 	qm->status.stop_reason = r;
@@ -6225,6 +6228,8 @@ static int hisi_qm_pci_init(struct hisi_qm *qm)
 		goto err_get_pci_res;
 	pci_set_master(pdev);
 
+	hisi_qm_set_state(qm, VF_PREPARE);
+
 	num_vec = qm_get_irq_num(qm);
 	ret = pci_alloc_irq_vectors(pdev, num_vec, num_vec, PCI_IRQ_MSI);
 	if (ret < 0) {
diff --git a/include/linux/hisi_acc_qm.h b/include/linux/hisi_acc_qm.h
index d220a7cb70f2..4ea4c233d9f4 100644
--- a/include/linux/hisi_acc_qm.h
+++ b/include/linux/hisi_acc_qm.h
@@ -67,7 +67,6 @@
 #define QM_DB_RAND_SHIFT_V2		16
 #define QM_DB_INDEX_SHIFT_V2		32
 #define QM_DB_PRIORITY_SHIFT_V2		48
-#define QM_VF_STATE			0x60
 
 /* qm cache */
 #define QM_CACHE_CTL			0x100050
@@ -92,6 +91,7 @@
 #define QM_SHAPER_CFG			0x100164
 #define QM_SHAPER_ENABLE		BIT(30)
 #define QM_SHAPER_TYPE1_OFFSET		10
+#define QM_VF_STATE			0x0060
 
 /* page number for queue file region */
 #define QM_DOORBELL_PAGE_NR		1
@@ -140,9 +140,10 @@ enum qm_debug_file {
 	DEBUG_FILE_NUM,
 };
 
-enum qm_vf_state {
-	QM_READY = 0,
-	QM_NOT_READY,
+enum vf_state {
+	VF_READY = 0x0,
+	VF_NOT_READY,
+	VF_PREPARE,
 };
 
 enum qm_cap_bits {
-- 
2.33.0

