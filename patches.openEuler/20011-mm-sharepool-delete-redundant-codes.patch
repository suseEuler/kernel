From cd65775f1acfbfe31af7e8ca12a0c53a2de0c473 Mon Sep 17 00:00:00 2001
From: Guo Mengqi <guomengqi3@huawei.com>
Date: Thu, 3 Nov 2022 06:41:40 +0000
Subject: [PATCH] mm/sharepool: delete redundant codes
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: cd65775f1acfbfe31af7e8ca12a0c53a2de0c473
Modified-by-SEL: No


hulk inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I5O5RQ
CVE: NA

--------------------------------

Notice that in sp_unshare_uva(), for authentication check, comparison
between current->tgid and spa->applier is well enough. There is no need
to check current->mm against spa->mm.

Other redundant cases:
- find_spg_node_by_spg() will never return NULL in current use context;
- spg_info_show() will not come across a group with id 0.

Therefore, delete these redundant paths.

Signed-off-by: Guo Mengqi <guomengqi3@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/share_pool.h |  1 -
 mm/share_pool.c            | 43 ++++----------------------------------
 2 files changed, 4 insertions(+), 40 deletions(-)

diff --git a/include/linux/share_pool.h b/include/linux/share_pool.h
index 4860e4b00e57..ebf4b10a0965 100644
--- a/include/linux/share_pool.h
+++ b/include/linux/share_pool.h
@@ -44,7 +44,6 @@
 #define SPG_ID_LOCAL_MAX	299999
 
 #define SPG_FLAG_NON_DVPP	(1 << 0)
-#define SPG_FLAG_MASK		(SPG_FLAG_NON_DVPP)
 
 #define MAX_DEVID 8	/* the max num of Da-vinci devices */
 
diff --git a/mm/share_pool.c b/mm/share_pool.c
index aa0d16a7befe..963cac4734ac 100644
--- a/mm/share_pool.c
+++ b/mm/share_pool.c
@@ -799,11 +799,6 @@ static void spa_dec_usage(struct sp_area *spa)
 static void update_mem_usage(unsigned long size, bool inc, bool is_hugepage,
 	struct sp_group_node *spg_node, enum spa_type type)
 {
-	if (unlikely(!spg_node)) {
-		WARN(1, "null sp group node\n");
-		return;
-	}
-
 	switch (type) {
 	case SPA_TYPE_ALLOC:
 		update_mem_usage_alloc(size, inc, is_hugepage, spg_node);
@@ -837,10 +832,7 @@ static void sp_update_process_stat(struct task_struct *tsk, bool inc,
 	enum spa_type type = spa->type;
 
 	spg_node = find_spg_node_by_spg(tsk->mm, spa->spg);
-	if (!spg_node)
-		pr_err("share pool: spg node not found!\n");
-	else
-		update_mem_usage(size, inc, spa->is_hugepage, spg_node, type);
+	update_mem_usage(size, inc, spa->is_hugepage, spg_node, type);
 }
 
 static inline void check_interrupt_context(void)
@@ -1086,11 +1078,6 @@ static struct sp_group *create_spg(int spg_id, unsigned long flag)
 		return ERR_PTR(-ENOSPC);
 	}
 
-	if (flag & ~SPG_FLAG_MASK) {
-		pr_err_ratelimited("invalid flag:%#lx\n", flag);
-		return ERR_PTR(-EINVAL);
-	}
-
 	spg = kzalloc(sizeof(*spg), GFP_KERNEL);
 	if (spg == NULL)
 		return ERR_PTR(-ENOMEM);
@@ -2743,10 +2730,7 @@ static void *sp_make_share_kva_to_task(unsigned long kva, unsigned long size, un
 		pr_err("remap k2u to task failed %ld\n", PTR_ERR(uva));
 	else {
 		spg_node = find_spg_node_by_spg(current->mm, spa->spg);
-		if (!spg_node)
-			pr_err("spg_node is null\n");
-		else
-			update_mem_usage(size, true, spa->is_hugepage, spg_node, SPA_TYPE_K2TASK);
+		update_mem_usage(size, true, spa->is_hugepage, spg_node, SPA_TYPE_K2TASK);
 		spa->mm = current->mm;
 	}
 
@@ -3317,12 +3301,6 @@ static int sp_unshare_uva(unsigned long uva, unsigned long size, int group_id)
 			goto out_drop_area;
 		}
 
-		if (!spa->mm) {
-			pr_err_ratelimited("unshare uva(to task) failed, none spa owner\n");
-			ret = -EINVAL;
-			goto out_drop_area;
-		}
-
 		/*
 		 * current thread may be exiting in a multithread process
 		 *
@@ -3336,13 +3314,6 @@ static int sp_unshare_uva(unsigned long uva, unsigned long size, int group_id)
 			goto out_clr_flag;
 		}
 
-		if (spa->mm != mm) {
-			pr_err_ratelimited("unshare uva(to task) failed, spa not belong to the task\n");
-			ret = -EINVAL;
-			mmput(mm);
-			goto out_drop_area;
-		}
-
 		down_write(&mm->mmap_lock);
 		if (unlikely(mm->core_state)) {
 			ret = 0;
@@ -3980,10 +3951,7 @@ static int spg_info_show(int id, void *p, void *data)
 		return 0;
 
 	if (seq != NULL) {
-		if (id == 0)
-			seq_puts(seq, "Non Group ");
-		else
-			seq_printf(seq, "Group %6d ", id);
+		seq_printf(seq, "Group %6d ", id);
 
 		down_read(&spg->rw_lock);
 		seq_printf(seq, "size: %lld KB, spa num: %d, total alloc: %lld KB, normal alloc: %lld KB, huge alloc: %lld KB\n",
@@ -3994,10 +3962,7 @@ static int spg_info_show(int id, void *p, void *data)
 				byte2kb(atomic64_read(&spg->instat.alloc_hsize)));
 		up_read(&spg->rw_lock);
 	} else {
-		if (id == 0)
-			pr_info("Non Group ");
-		else
-			pr_info("Group %6d ", id);
+		pr_info("Group %6d ", id);
 
 		down_read(&spg->rw_lock);
 		pr_info("size: %lld KB, spa num: %d, total alloc: %lld KB, normal alloc: %lld KB, huge alloc: %lld KB\n",
-- 
2.33.0

