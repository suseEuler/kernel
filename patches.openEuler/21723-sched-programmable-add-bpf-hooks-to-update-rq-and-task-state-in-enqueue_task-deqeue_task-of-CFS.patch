From 8085949faf0a5ec22db5426403c405a5ee967081 Mon Sep 17 00:00:00 2001
From: Ren Zhijie <renzhijie2@huawei.com>
Date: Fri, 25 Nov 2022 11:56:27 +0800
Subject: [PATCH] sched: programmable: add bpf hooks to update rq and task
 state in enqueue_task/deqeue_task of CFS
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 8085949faf0a5ec22db5426403c405a5ee967081
Modified-by-SEL: No


Add 2 hooks to update rq and task state in enqueue_task_fair() and
dequeue_task_fair():
	cfs_enqueue_task
	cfs_dequeue_task

When entering and leaving the runqeue, these hooks use to get and
update context of interest to bpf prog after the runqueue completes
the status change.

Signed-off-by: Ren Zhijie <renzhijie2@huawei.com>
Signed-off-by: Hui Tang <tanghui20@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/sched_hook_defs.h |  2 ++
 kernel/sched/fair.c             | 10 ++++++++++
 2 files changed, 12 insertions(+)

diff --git a/include/linux/sched_hook_defs.h b/include/linux/sched_hook_defs.h
index f1e19d8ff735..2b598f2053d5 100644
--- a/include/linux/sched_hook_defs.h
+++ b/include/linux/sched_hook_defs.h
@@ -5,3 +5,5 @@ BPF_SCHED_HOOK(int, 0, cfs_wakeup_preempt_entity, struct sched_entity *curr,
 	struct sched_entity *se)
 BPF_SCHED_HOOK(int, 0, cfs_tag_pick_next_entity, struct sched_entity *curr,
 	       struct sched_entity *next)
+BPF_SCHED_HOOK(void, (void) 0, cfs_enqueue_task, struct rq *rq, struct task_struct *p)
+BPF_SCHED_HOOK(void, (void) 0, cfs_dequeue_task, struct rq *rq, struct task_struct *p)
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index eaec5febfd45..4206bb6117bb 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -5703,6 +5703,11 @@ enqueue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 	assert_list_leaf_cfs_rq(rq);
 
 	hrtick_update(rq);
+
+#ifdef CONFIG_BPF_SCHED
+	if (bpf_sched_enabled())
+		bpf_sched_cfs_enqueue_task(rq, p);
+#endif
 }
 
 static void set_next_buddy(struct sched_entity *se);
@@ -5777,6 +5782,11 @@ static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 dequeue_throttle:
 	util_est_update(&rq->cfs, p, task_sleep);
 	hrtick_update(rq);
+
+#ifdef CONFIG_BPF_SCHED
+	if (bpf_sched_enabled())
+		bpf_sched_cfs_dequeue_task(rq, p);
+#endif
 }
 
 #ifdef CONFIG_SMP
-- 
2.33.0

