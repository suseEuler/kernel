From 5384a3a3e7337b4953636b75c681ef0b0083ac0c Mon Sep 17 00:00:00 2001
From: Mao Minkai <maominkai@wxiat.com>
Date: Thu, 23 Jun 2022 14:11:05 +0800
Subject: [PATCH] sw64: fix __csum_and_copy when dest is not 8-byte aligned
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 5384a3a3e7337b4953636b75c681ef0b0083ac0c
Modified-by-SEL: No


Sunway inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I56W9F

--------------------------------

When destination is not 8-byte aligned,
csum_partial_cfu_dest_unaligned() should be used to avoid kernel
unaligned exception.

Fixes: 2fcadd2861b4 ("sw64: optimize ip checksum calculation")
Signed-off-by: Mao Minkai <maominkai@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/lib/csum_partial_copy.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/sw_64/lib/csum_partial_copy.c b/arch/sw_64/lib/csum_partial_copy.c
index 441ae5575de5..5e5274e82b2b 100644
--- a/arch/sw_64/lib/csum_partial_copy.c
+++ b/arch/sw_64/lib/csum_partial_copy.c
@@ -128,9 +128,9 @@ static __wsum __csum_and_copy(const void __user *src, void *dst, int len)
 			(const unsigned long __user *) src,
 			(unsigned long *) dst, len-8);
 	} else {
-		checksum = csum_partial_cfu_dest_aligned(
+		checksum = csum_partial_cfu_dest_unaligned(
 			(const unsigned long __user *) src,
-			(unsigned long *) dst, len-8);
+			(unsigned long *) dst, doff, len-8);
 	}
 	return (__force __wsum)from64to16(checksum);
 }
-- 
2.33.0

