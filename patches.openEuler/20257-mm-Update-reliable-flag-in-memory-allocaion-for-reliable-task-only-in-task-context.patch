From b9b3aaade9ce3bb1abe795e3a82ad8a0a8359e45 Mon Sep 17 00:00:00 2001
From: Ma Wupeng <mawupeng1@huawei.com>
Date: Fri, 11 Nov 2022 09:32:43 +0800
Subject: [PATCH] mm: Update reliable flag in memory allocaion for reliable
 task only in task context
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: b9b3aaade9ce3bb1abe795e3a82ad8a0a8359e45
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4SK3S
CVE: NA

--------------------------------

Since interrupt may occupy reliable task's context and its current->flags
will have PF_RELIABLE and this will lead to redirect it's memory allocation
to mirrored region.

In order to solve this problem, update reliable task's gfp flag can only
happen in normal task context by checking in_task().

Signed-off-by: Ma Wupeng <mawupeng1@huawei.com>
Reviewed-by: Kefeng Wang <wangkefeng.wang@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 mm/page_alloc.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index a8abfe6458a5..2feb99a0b98f 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -5186,6 +5186,9 @@ static inline void prepare_before_alloc(gfp_t *gfp_mask)
 	if (!zone_movable)
 		goto clear_flag;
 
+	if (!in_task())
+		return;
+
 	if ((current->flags & PF_RELIABLE) || is_global_init(current))
 		*gfp_mask |= GFP_RELIABLE;
 
-- 
2.33.0

