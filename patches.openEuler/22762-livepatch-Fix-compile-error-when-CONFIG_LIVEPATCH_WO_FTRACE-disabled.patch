From 959c509388b17b42e3c62ecde187c4debb333832 Mon Sep 17 00:00:00 2001
From: Zheng Yejian <zhengyejian1@huawei.com>
Date: Wed, 4 Jan 2023 19:08:38 +0800
Subject: [PATCH] livepatch: Fix compile error when CONFIG_LIVEPATCH_WO_FTRACE
 disabled
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 959c509388b17b42e3c62ecde187c4debb333832
Modified-by-SEL: No

MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

hulk inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I67QMO
CVE: NA

--------------------------------

When disable CONFIG_LIVEPATCH_WO_FTRACE, compiler report following error:
  kernel/livepatch/core.c: In function ‘check_address_conflict’:
  kernel/livepatch/core.c:1214:18: error: ‘KLP_MAX_REPLACE_SIZE’
  undeclared (first use in this function)
   1214 |    end = start + KLP_MAX_REPLACE_SIZE - 1;
        |                  ^~~~~~~~~~~~~~~~~~~~
  kernel/livepatch/core.c:1214:18: note: each undeclared identifier is
  reported only once for each function it appears in
  At top level:
  kernel/livepatch/core.c:1195:12: warning: ‘check_address_conflict’
  defined but not used [-Wunused-function]
   1195 | static int check_address_conflict(struct klp_patch *patch)
        |            ^~~~~~~~~~~~~~~~~~~~~~

Fixes: 2c3c0b3af9f9 ("livepatch/x86: Avoid conflict with static {call,key}")
Fixes: ed8c4c729c5f ("livepatch/core: Restrict minimum size of function that can be patched")
Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
Reviewed-by: Kuohai Xu <xukuohai@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 kernel/livepatch/core.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/kernel/livepatch/core.c b/kernel/livepatch/core.c
index 9e65f6ae4061..a00aa45eb065 100644
--- a/kernel/livepatch/core.c
+++ b/kernel/livepatch/core.c
@@ -1041,11 +1041,13 @@ static int klp_init_object_loaded(struct klp_patch *patch,
 			       func->old_name);
 			return -ENOENT;
 		}
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
 		if (func->old_size < KLP_MAX_REPLACE_SIZE) {
 			pr_err("%s size less than limit (%lu < %zu)\n", func->old_name,
 			       func->old_size, KLP_MAX_REPLACE_SIZE);
 			return -EINVAL;
 		}
+#endif
 
 #ifdef PPC64_ELF_ABI_v1
 		/*
@@ -1195,6 +1197,7 @@ extern int klp_static_call_register(struct module *mod);
 static inline int klp_static_call_register(struct module *mod) { return 0; }
 #endif
 
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
 static int check_address_conflict(struct klp_patch *patch)
 {
 	struct klp_object *obj;
@@ -1231,6 +1234,7 @@ static int check_address_conflict(struct klp_patch *patch)
 	}
 	return 0;
 }
+#endif
 
 static int klp_init_patch(struct klp_patch *patch)
 {
@@ -1278,11 +1282,11 @@ static int klp_init_patch(struct klp_patch *patch)
 	}
 	module_enable_ro(patch->mod, true);
 
+#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
 	ret = check_address_conflict(patch);
 	if (ret)
 		return ret;
 
-#ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
 	klp_for_each_object(patch, obj)
 		klp_load_hook(obj);
 #endif
-- 
2.33.0

