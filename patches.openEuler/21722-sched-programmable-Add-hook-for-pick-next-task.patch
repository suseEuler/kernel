From 324e7c64f74b2073921d162c7cca2bf0f82c4194 Mon Sep 17 00:00:00 2001
From: Guan Jing <guanjing6@huawei.com>
Date: Fri, 25 Nov 2022 11:56:26 +0800
Subject: [PATCH] sched: programmable: Add hook for pick next task
MIME-Version: 1.0
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 324e7c64f74b2073921d162c7cca2bf0f82c4194
Modified-by-SEL: No

Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5KUFB
CVE: NA

--------------------------------

This hook point can change the position of se on the red-black tree,
eg:  in cloud scenarios, there will be online tasks that need to
respond in time and offline tasks that do not need to respond in time.
This hook point provides users with a way to customize that
Class tasks run first.
The basis for pick next task comes from system information,
such as the red-black tree, and so onâ€¦ If the system
information of the CFS is modified, it will affect
the whole system. Therefore, the hook function is added here.
Only the position of the task on the red-black tree is modified,
and the value of vruntime is not changed.

Signed-off-by: Guan Jing <guanjing6@huawei.com>
Signed-off-by: Hui Tang <tanghui20@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/sched_hook_defs.h | 2 ++
 kernel/sched/fair.c             | 9 +++++++++
 2 files changed, 11 insertions(+)

diff --git a/include/linux/sched_hook_defs.h b/include/linux/sched_hook_defs.h
index e2f65e4b8895..f1e19d8ff735 100644
--- a/include/linux/sched_hook_defs.h
+++ b/include/linux/sched_hook_defs.h
@@ -3,3 +3,5 @@ BPF_SCHED_HOOK(int, 0, cfs_check_preempt_tick, struct sched_entity *curr, unsign
 BPF_SCHED_HOOK(int, 0, cfs_check_preempt_wakeup, struct task_struct *curr, struct task_struct *p)
 BPF_SCHED_HOOK(int, 0, cfs_wakeup_preempt_entity, struct sched_entity *curr,
 	struct sched_entity *se)
+BPF_SCHED_HOOK(int, 0, cfs_tag_pick_next_entity, struct sched_entity *curr,
+	       struct sched_entity *next)
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 9eb9a77781d3..eaec5febfd45 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -509,6 +509,15 @@ static inline u64 min_vruntime(u64 min_vruntime, u64 vruntime)
 static inline bool entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
+#ifdef CONFIG_BPF_SCHED
+	if (bpf_sched_enabled()) {
+		int ret = bpf_sched_cfs_tag_pick_next_entity(a, b);
+
+		if (ret == 1)
+			return 1;
+	}
+#endif
+
 	return (s64)(a->vruntime - b->vruntime) < 0;
 }
 
-- 
2.33.0

