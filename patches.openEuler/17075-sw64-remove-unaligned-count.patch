From b6bc5e6d316eb6e70a88ca730d2e099a8bad1bf7 Mon Sep 17 00:00:00 2001
From: Hang Xiaoqian <hangxiaoqian@wxiat.com>
Date: Mon, 20 Jun 2022 16:54:38 +0800
Subject: [PATCH] sw64: remove unaligned count
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: b6bc5e6d316eb6e70a88ca730d2e099a8bad1bf7
Modified-by-SEL: No


Sunway inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I5GFNY

--------------------------------

In the case of highly concurrent unaligned processing, unaligned
count may cause severe cache thrashing. However, unaligned count
is not required, so remove it to reduce cache thrashing.

Signed-off-by: Hang Xiaoqian <hangxiaoqian@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/kernel/Makefile    |  2 +-
 arch/sw_64/kernel/traps.c     | 13 --------
 arch/sw_64/kernel/unaligned.c | 56 -----------------------------------
 3 files changed, 1 insertion(+), 70 deletions(-)
 delete mode 100644 arch/sw_64/kernel/unaligned.c

diff --git a/arch/sw_64/kernel/Makefile b/arch/sw_64/kernel/Makefile
index c1e461e0ac56..94b63d6a286b 100644
--- a/arch/sw_64/kernel/Makefile
+++ b/arch/sw_64/kernel/Makefile
@@ -31,7 +31,7 @@ obj-$(CONFIG_HIBERNATION) += hibernate_asm.o hibernate.o
 obj-$(CONFIG_AUDIT)     += audit.o
 obj-$(CONFIG_PCI) += pci_common.o
 obj-$(CONFIG_RELOCATABLE)   += relocate.o
-obj-$(CONFIG_DEBUG_FS)	+= unaligned.o segvdbg.o
+obj-$(CONFIG_DEBUG_FS)	+= segvdbg.o
 obj-$(CONFIG_JUMP_LABEL) += jump_label.o
 
 ifndef CONFIG_PCI
diff --git a/arch/sw_64/kernel/traps.c b/arch/sw_64/kernel/traps.c
index a61c851967a9..d656eca5f961 100644
--- a/arch/sw_64/kernel/traps.c
+++ b/arch/sw_64/kernel/traps.c
@@ -320,11 +320,6 @@ do_entIF(unsigned long inst_type, struct pt_regs *regs)
 	force_sig_fault(SIGILL, ILL_ILLOPC, (void __user *)regs->pc, 0);
 }
 
-struct unaligned_stat {
-	unsigned long count, va, pc;
-} unaligned[2];
-
-
 asmlinkage void
 do_entUna(void *va, unsigned long opcode, unsigned long reg,
 	  struct pt_regs *regs)
@@ -334,10 +329,6 @@ do_entUna(void *va, unsigned long opcode, unsigned long reg,
 	unsigned long pc = regs->pc - 4;
 	const struct exception_table_entry *fixup;
 
-	unaligned[0].count++;
-	unaligned[0].va = (unsigned long) va;
-	unaligned[0].pc = pc;
-
 	/*
 	 * We don't want to use the generic get/put unaligned macros as
 	 * we want to trap exceptions. Only if we actually get an
@@ -666,10 +657,6 @@ do_entUnaUser(void __user *va, unsigned long opcode,
 	if ((unsigned long)va >= TASK_SIZE)
 		goto give_sigsegv;
 
-	++unaligned[1].count;
-	unaligned[1].va = (unsigned long)va;
-	unaligned[1].pc = regs->pc - 4;
-
 	if ((1L << opcode) & OP_INT_MASK) {
 		/* it's an integer load/store */
 		if (reg < 30) {
diff --git a/arch/sw_64/kernel/unaligned.c b/arch/sw_64/kernel/unaligned.c
deleted file mode 100644
index a1bbdab4a266..000000000000
--- a/arch/sw_64/kernel/unaligned.c
+++ /dev/null
@@ -1,56 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-
-/*
- * Copyright (C) 2020 Mao Minkai
- * Author: Mao Minkai
- *
- * This code is taken from arch/mips/kernel/segment.c
- *	Copyright (C) 2013 Imagination Technologies Ltd.
- *
- * This file is subject to the terms and conditions of the GNU General Public
- * License.  See the file "COPYING" in the main directory of this archive
- * for more details.
- */
-
-#include <asm/unaligned.h>
-#include <asm/debug.h>
-
-static int show_unaligned(struct seq_file *sf, void *v)
-{
-	extern struct unaligned_stat {
-		unsigned long count, va, pc;
-	} unaligned[2];
-
-	seq_printf(sf, "kernel unaligned acc\t: %ld (pc=%lx, va=%lx)\n", unaligned[0].count, unaligned[0].pc, unaligned[0].va);
-	seq_printf(sf, "user unaligned acc\t: %ld (pc=%lx, va=%lx)\n", unaligned[1].count, unaligned[1].pc, unaligned[1].va);
-
-	return 0;
-}
-
-static int unaligned_open(struct inode *inode, struct file *file)
-{
-	return single_open(file, show_unaligned, NULL);
-}
-
-static const struct file_operations unaligned_fops = {
-	.open		= unaligned_open,
-	.read		= seq_read,
-	.llseek		= seq_lseek,
-	.release	= single_release,
-};
-
-static int __init unaligned_info(void)
-{
-	struct dentry *unaligned;
-
-	if (!sw64_debugfs_dir)
-		return -ENODEV;
-
-	unaligned = debugfs_create_file("unaligned", S_IRUGO,
-				       sw64_debugfs_dir, NULL,
-				       &unaligned_fops);
-	if (!unaligned)
-		return -ENOMEM;
-	return 0;
-}
-device_initcall(unaligned_info);
-- 
2.33.0

