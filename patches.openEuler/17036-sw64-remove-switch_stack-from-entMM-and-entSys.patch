From 9edfcf89f2df44eda3a312e0c958914f391a14cf Mon Sep 17 00:00:00 2001
From: He Sheng <hesheng@wxiat.com>
Date: Sun, 24 Apr 2022 09:52:46 +0800
Subject: [PATCH] sw64: remove switch_stack from entMM and entSys
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 9edfcf89f2df44eda3a312e0c958914f391a14cf
Modified-by-SEL: No


Sunway inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5GF7A

--------------------------------

This patch removes switch_stack and its usages in mm fault entry
and system call entry. Note that ptrace accesses registers with
struct pt_regs only since strace gave up a switch_stack trick.

Signed-off-by: He Sheng <hesheng@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/kernel/entry.S  | 42 +++-----------------------------------
 arch/sw_64/kernel/ptrace.c | 12 ++---------
 2 files changed, 5 insertions(+), 49 deletions(-)

diff --git a/arch/sw_64/kernel/entry.S b/arch/sw_64/kernel/entry.S
index ac62461aa9dc..f843acd88249 100644
--- a/arch/sw_64/kernel/entry.S
+++ b/arch/sw_64/kernel/entry.S
@@ -133,31 +133,11 @@ entArith:
 	.ent entMM
 entMM:
 	SAVE_ALL
-/* save $9 - $15 so the inline exception code can manipulate them.  */
-	subl	$sp, SWITCH_STACK_RA, $sp
-	stl	$9, SWITCH_STACK_R9($sp)
-	stl	$10, SWITCH_STACK_R10($sp)
-	stl	$11, SWITCH_STACK_R11($sp)
-	stl	$12, SWITCH_STACK_R12($sp)
-	stl	$13, SWITCH_STACK_R13($sp)
-	stl	$14, SWITCH_STACK_R14($sp)
-	stl	$15, SWITCH_STACK_R15($sp)
-	addl	$sp, SWITCH_STACK_RA, $19
-/* handle the fault */
 	ldi	$8, 0x3fff
+	ldi	$26, ret_from_sys_call
 	bic	$sp, $8, $8
-	call	$26, do_page_fault
-/* reload the registers after the exception code played.  */
-	ldl	$9, SWITCH_STACK_R9($sp)
-	ldl	$10, SWITCH_STACK_R10($sp)
-	ldl	$11, SWITCH_STACK_R11($sp)
-	ldl	$12, SWITCH_STACK_R12($sp)
-	ldl	$13, SWITCH_STACK_R13($sp)
-	ldl	$14, SWITCH_STACK_R14($sp)
-	ldl	$15, SWITCH_STACK_R15($sp)
-	addl	$sp, SWITCH_STACK_RA, $sp
-/* finish up the syscall as normal.  */
-	br	ret_from_sys_call
+	mov	$sp, $19
+	call	$31, do_page_fault
 	.end entMM
 
 	.align 4
@@ -400,9 +380,7 @@ $work_resched:
 
 $work_notifysig:
 	mov	$sp, $16
-	bsr	$1, do_switch_stack
 	call	$26, do_work_pending
-	bsr	$1, undo_switch_stack
 	br	restore_all
 	.end work_pending
 
@@ -416,14 +394,9 @@ $work_notifysig:
 	.ent strace
 strace:
 	/* set up signal stack, call syscall_trace */
-	bsr	$1, do_switch_stack
 	mov	$0, $9
 	mov	$19, $10
 	call	$26, syscall_trace_enter
-	mov	$9, $18
-	mov	$10, $19
-	bsr	$1, undo_switch_stack
-
 	blt	$0, $syscall_trace_failed
 
 	/* get the system call number and the arguments back.. */
@@ -452,10 +425,7 @@ ret_from_straced:
 	stl	$31, PT_REGS_R19($sp)	/* a3=0 => no error */
 $strace_success:
 	stl	$0, PT_REGS_R0($sp)	/* save return value */
-
-	bsr	$1, do_switch_stack
 	call	$26, syscall_trace_leave
-	bsr	$1, undo_switch_stack
 	br	$31, ret_from_sys_call
 
 	.align 3
@@ -470,25 +440,19 @@ $strace_error:
 	stl	$0, PT_REGS_R0($sp)
 	stl	$1, PT_REGS_R19($sp)	/* a3 for return */
 
-	bsr	$1, do_switch_stack
 	mov	$18, $9		/* save old syscall number */
 	mov	$19, $10	/* save old a3 */
 	call	$26, syscall_trace_leave
 	mov	$9, $18
 	mov	$10, $19
-	bsr	$1, undo_switch_stack
 
 	mov	$31, $26	/* tell "ret_from_sys_call" we can restart */
 	br	ret_from_sys_call
 
 $syscall_trace_failed:
-	bsr	$1, do_switch_stack
-	mov	$18, $9
-	mov	$19, $10
 	call	$26, syscall_trace_leave
 	mov	$9, $18
 	mov	$10, $19
-	bsr	$1, undo_switch_stack
 	mov	$31, $26	/* tell "ret_from_sys_call" we can restart */
 	br	ret_from_sys_call
 	.end strace
diff --git a/arch/sw_64/kernel/ptrace.c b/arch/sw_64/kernel/ptrace.c
index 3b29ff7114f7..097590b22a5a 100644
--- a/arch/sw_64/kernel/ptrace.c
+++ b/arch/sw_64/kernel/ptrace.c
@@ -33,10 +33,6 @@
  *  | frame generated by SAVE_ALL    | |
  *  |				     | v
  *  +================================+
- *  |				     | ^
- *  | frame saved by do_switch_stack | | struct switch_stack
- *  |				     | v
- *  +================================+
  */
 
 /*
@@ -59,18 +55,14 @@ enum {
 #define PT_REG(reg) \
 	(PAGE_SIZE * 2 - sizeof(struct pt_regs) + offsetof(struct pt_regs, reg))
 
-#define SW_REG(reg) \
-	(PAGE_SIZE * 2 - sizeof(struct pt_regs) - sizeof(struct switch_stack) \
-	+ offsetof(struct switch_stack, reg))
-
 #define FP_REG(fp_regno, vector_regno) \
 	(fp_regno * 32 + vector_regno * 8)
 
 static int regoff[] = {
 	PT_REG(r0), PT_REG(r1), PT_REG(r2), PT_REG(r3),
 	PT_REG(r4), PT_REG(r5), PT_REG(r6), PT_REG(r7),
-	PT_REG(r8), SW_REG(r9), SW_REG(r10), SW_REG(r11),
-	SW_REG(r12), SW_REG(r13), SW_REG(r14), SW_REG(r15),
+	PT_REG(r8), PT_REG(r9), PT_REG(r10), PT_REG(r11),
+	PT_REG(r12), PT_REG(r13), PT_REG(r14), PT_REG(r15),
 	PT_REG(r16), PT_REG(r17), PT_REG(r18), PT_REG(r19),
 	PT_REG(r20), PT_REG(r21), PT_REG(r22), PT_REG(r23),
 	PT_REG(r24), PT_REG(r25), PT_REG(r26), PT_REG(r27),
-- 
2.33.0

