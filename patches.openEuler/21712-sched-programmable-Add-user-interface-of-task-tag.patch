From d49f78d572a2d6153bc6c20815241efd788e1f10 Mon Sep 17 00:00:00 2001
From: Chen Hui <judy.chenhui@huawei.com>
Date: Fri, 25 Nov 2022 11:56:16 +0800
Subject: [PATCH] sched: programmable: Add user interface of task tag
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: d49f78d572a2d6153bc6c20815241efd788e1f10
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5KUFB
CVE: NA

--------------------------------

Add user interface of task tag, bridges the information
gap between user-mode and kernel mode.

To do:
  /proc/${pid}/task/${pid}/tag

Signed-off-by: Chen Hui <judy.chenhui@huawei.com>
Signed-off-by: Ren Zhijie <renzhijie2@huawei.com>
Signed-off-by: Hui Tang <tanghui20@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 fs/proc/base.c | 65 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 65 insertions(+)

diff --git a/fs/proc/base.c b/fs/proc/base.c
index fe2633176ed5..98bfd18e61bc 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -3646,6 +3646,68 @@ static const struct inode_operations proc_tid_comm_inode_operations = {
 		.permission = proc_tid_comm_permission,
 };
 
+#ifdef CONFIG_BPF_SCHED
+static ssize_t pid_tag_write(struct file *file, const char __user *buf,
+				size_t count, loff_t *offset)
+{
+	struct inode *inode = file_inode(file);
+	struct task_struct *tsk;
+	char buffer[PROC_NUMBUF];
+	int err = 0, tag = 0;
+
+	tsk = get_proc_task(inode);
+	if (!tsk)
+		return -ESRCH;
+
+	memset(buffer, 0, sizeof(buffer));
+	if (count > sizeof(buffer) - 1)
+		count = sizeof(buffer) - 1;
+
+	if (copy_from_user(buffer, buf, count)) {
+		err = -EFAULT;
+		goto out;
+	}
+
+	err = kstrtoint(strstrip(buffer), 0, &tag);
+	if (err)
+		goto out;
+
+	sched_settag(tsk, tag);
+
+out:
+	put_task_struct(tsk);
+	return err < 0 ? err : count;
+}
+
+static int pid_tag_show(struct seq_file *m, void *v)
+{
+	struct inode *inode = m->private;
+	struct task_struct *tsk;
+
+	tsk = get_proc_task(inode);
+	if (!tsk)
+		return -ESRCH;
+
+	seq_printf(m, "%ld\n", tsk->tag);
+	put_task_struct(tsk);
+
+	return 0;
+}
+
+static int pid_tag_open(struct inode *inode, struct file *flip)
+{
+	return single_open(flip, pid_tag_show, inode);
+}
+
+static const struct file_operations proc_pid_tag_operations = {
+		.open		= pid_tag_open,
+		.read		= seq_read,
+		.write		= pid_tag_write,
+		.llseek		= seq_lseek,
+		.release	= single_release,
+};
+#endif
+
 /*
  * Tasks
  */
@@ -3755,6 +3817,9 @@ static const struct pid_entry tid_base_stuff[] = {
 #ifdef CONFIG_ASCEND_SHARE_POOL
 	ONE("sp_group", 0444, proc_sp_group_state),
 #endif
+#ifdef CONFIG_BPF_SCHED
+	REG("tag", 0644, proc_pid_tag_operations),
+#endif
 };
 
 static int proc_tid_base_readdir(struct file *file, struct dir_context *ctx)
-- 
2.33.0

